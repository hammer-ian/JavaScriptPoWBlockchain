import { ElasticLoadBalancingV2Client, DescribeTargetHealthCommand } from "@aws-sdk/client-elastic-load-balancing-v2";
import { EC2Client, DescribeInstancesCommand } from "@aws-sdk/client-ec2";
import { LambdaClient, InvokeCommand } from "@aws-sdk/client-lambda";

export const handler = async (event) => {
  console.log("Lambda function started");
  
  //Extract TG details from CloudWatch Alarm event to construct full TG ARN
  const TgAWSregion = event.region;
  const actNum = event.accountId;
  const targetGroupName = event.alarmData.configuration.metrics[0].metricStat.metric.dimensions.TargetGroup;
  //Final TG ARN
  const targetGroupArn = `arn:aws:elasticloadbalancing:${TgAWSregion}:${actNum}:${targetGroupName}`;

  const healthyInstancesIPs = await findHealthyEC2Instances(targetGroupArn);
  console.log(`Healthy Private IPs are: ${healthyInstancesIPs}`);

  await invokeLambdaInVPC(healthyInstancesIPs);
  
  //Find a healthy EC2 instance (blockchain node) to notify of the unhealthy instance
  async function findHealthyEC2Instances(targetGroupArn) {
        
    const params = { TargetGroupArn: targetGroupArn };
    let healthyInstances = [];
  
    try{  
      const ElbClient = new ElasticLoadBalancingV2Client();
      const command = new DescribeTargetHealthCommand(params)
      
      const data = await ElbClient.send(command);
      healthyInstances = data.TargetHealthDescriptions.filter(
          target => target.TargetHealth.State === 'healthy'
      );
      
      console.log(healthyInstances);
      
      if(healthyInstances.length === 0){
        console.log('No healthy EC2 instances were found, node de-registration not possible'); 
        return [];
  	  }
  	  else {
        //get privateIP addresses for healthy instances
        console.log('Healthy EC2 Instances potentially found, retrieving private IP of each instance');
        const privateIPAddresses = [];
        for (const target of healthyInstances) {
            const instanceId = target.Target.Id;
            const privateIp = await getPrivateIp(instanceId);

            privateIPAddresses.push(privateIp);
            console.log(`Instance ID: ${instanceId}, Private IP: ${privateIp}`);
        }
        return privateIPAddresses;
      }
    } catch (err) {
        console.log(`Error describing target health: ${err}`);
        return [];
    }
  }
  //find the private IP of each healthy EC2 instance
  async function getPrivateIp(instanceId) {

    const params = { InstanceIds: [instanceId] };
    try {
        console.log(`Retrieving private IP for instance ${instanceId}`);
        const ec2Client = new EC2Client();
        const command = new DescribeInstancesCommand(params);
        
        const data = await ec2Client.send(command);
        const instance = data.Reservations[0].Instances[0];
        return instance.PrivateIpAddress;
    } catch (err) {
        console.log(`Error retrieving IP for instance ${instanceId}:, ${err}`);
        return 'N/A';
    }
  }
  
  async function invokeLambdaInVPC(healthyInstancesIPs){
    
    const payload = {
      healthyIPs: healthyInstancesIPs
    };
    
    const params = {
      FunctionName: process.env.RequestNodeFindUnhealthyNodeARN,
      InvocationType: "RequestResponse", //synchronous communication
      Payload: JSON.stringify(payload)
    };
    
    try{
      const client = new LambdaClient();
      const command = new InvokeCommand(params);
      const result = await client.send(command);
      console.log(`Lambda invoked successfully ${JSON.stringify(result)}`);
      
    } catch (error){
      console.error(`Error invoking Lambda: ${error}`);
    }
  }
};
